(function() {
    'use strict';

    const CONFIG = {
        STORAGE_KEY: 'autoCelebState',
        TIMER_CONFIG_KEY: 'autoCelebTimerConfig_v2.9',
        TIMER_RESTART_KEY: 'autoCelebTimerRestart',
        TIMER_END_TIME_KEY: 'autoCelebTimerEndTime',
        TARGET_PAGE: 'https://locket.binhake.dev/celebrity.html',
        LOGO_URL: 'https://i.imgur.com/AM2f24N.png',

        // --- M·ªöI: C√†i ƒë·∫∑t Key K√≠ch Ho·∫°t ---
        SECRET_KEY: '2025', // <-- Key c·ªßa b·∫°n
        KEY_STORAGE_KEY: 'autoCelebKeyValidated_v1', // <-- T√™n ƒë·ªÉ l∆∞u key
        MESSENGER_LINK: 'https://www.messenger.com/c/655145337208323/'
    };

    let activeTimerId = null;
    let currentTimerConfig = { enabled: false, minutes: 60 };
    let currentTimerTotalDuration = 0;

    let webLogObserver = null;

    // --- UI & Logging ---

    function getTimestamp() {
        const now = new Date();
        const date = [now.getDate().toString().padStart(2, '0'), (now.getMonth() + 1).toString().padStart(2, '0'), now.getFullYear()];
        const time = [now.getHours().toString().padStart(2, '0'), now.getMinutes().toString().padStart(2, '0'), now.getSeconds().toString().padStart(2, '0')];
        return `[${date.join('/')} ${time.join(':')}]`;
    }

    /**
     * Ghi log (ƒê√É C·∫¨P NH·∫¨T - L·ªçc b·ªõt log ra kh·ªèi UI)
     */
    function log(message, type = 'log') {
        // 1. Lu√¥n ghi ra Console
        const styles = { log: 'color: inherit;', info: 'color: #3b82f6;', success: 'color: #22c55e;', error: 'color: #ef4444; font-weight: bold;', rocket: '', timer: 'color: #f59e0b;', warn: 'color: #f59e0b;' };
        const prefix = type === 'rocket' ? 'üöÄ' : (type === 'success' ? '‚úÖ' : (type === 'info' ? '‚ÑπÔ∏è' : (type === 'timer' ? '‚è±Ô∏è' : (type === 'warn' ? '‚ö†Ô∏è' : '‚û°Ô∏è'))));
        console.log(`%c[Auto Locket Celeb]%c ${prefix} ${message}`, 'color: #8b5cf6; font-weight: bold;', styles[type] || styles.log);

        try {
            // 2. Ch·ªâ ghi ra Textarea (UI) n·∫øu kh√¥ng b·ªã l·ªçc
            const logTextarea = document.getElementById('auto-celeb-script-log');
            if (logTextarea) {
                // ===== B·∫ÆT ƒê·∫¶U L·ªåC LOG =====
                const filteredMessages = [
                    "Th·ªùi gian h·∫πn gi·ªù t·ªëi thi·ªÉu",
                    "TƒÉng th·ªùi gian h·∫πn gi·ªù l√™n",
                    "Gi·∫£m th·ªùi gian h·∫πn gi·ªù xu·ªëng",
                    "ƒê√£ TI·∫æP T·ª§C ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c",
                    "H·∫πn gi·ªù ƒê√É T·∫ÆT",
                    "H·∫πn gi·ªù ƒê√É B·∫¨T",
                    "Ph√°t hi·ªán popup th√¥ng b√°o c≈©. T·ª± ƒë·ªông ƒë√≥ng...",
                    'Ph√°t hi·ªán "Th√¥ng B√°o Quan Tr·ªçng". T·ª± ƒë·ªông ƒë√≥ng...',
                    'B·∫Øt ƒë·∫ßu theo d√µi nh·∫≠t k√Ω c·ªßa'
                ];

                const isFiltered = filteredMessages.some(filter => message.includes(filter));
                if (isFiltered) return; // Kh√¥ng ghi v√†o textarea
                // ===== K·∫æT TH√öC L·ªåC LOG =====

                const timestamp = getTimestamp();
                const logMessage = `${timestamp} ${message}\n`;
                logTextarea.value += logMessage;
                logTextarea.scrollTop = logTextarea.scrollHeight;
            }
        } catch (e) {
            // B·ªè qua l·ªói
        }
    }

    function showCelebPopup(celebName, countText) {
        let container = document.getElementById('auto-celeb-popup-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'auto-celeb-popup-container';
            document.body.appendChild(container);
        }
        const popup = document.createElement('div');
        popup.className = 'celeb-popup-item';
        popup.innerHTML = `
            <span class="celeb-count">${countText}</span>
            ƒêang x·ª≠ l√Ω: <span class="celeb-name">${celebName}</span>
        `;
        container.prepend(popup);
        setTimeout(() => {
            popup.remove();
            if (container.children.length === 0) {
                container.remove();
            }
        }, 4000);
    }

    /**
     * Ti√™m CSS (ƒê√É C·∫¨P NH·∫¨T - Th√™m style cho Key Wall)
     */
    function injectNewStyles() {
        const style = document.createElement('style');
        style.textContent = `
            /* ---------------------------
                PHONG C√ÅCH CHUNG
            --------------------------- */

            #auto-celeb-main-container {
                position: fixed;
                z-index: 9999;
                display: flex;
                flex-direction: column;
                gap: 12px;
                width: 350px;
                font-family: 'Inter', 'Poppins', 'Segoe UI', sans-serif;
                background: rgba(30,30,30,0.65);
                backdrop-filter: blur(15px);
                border: 1px solid rgba(255,255,255,0.15);
                box-shadow: 0 8px 30px rgba(0,0,0,0.3);
                border-radius: 16px;
                padding: 12px;
                top: 90px;
                left: 24px;
                right: auto;
                bottom: auto;
                max-height: 90vh;
                overflow: hidden;
                transition: max-height 0.3s ease, padding-top 0.3s ease, padding-bottom 0.3s ease;
            }

            #auto-celeb-popup-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                color: white;
                font-size: 18px;
                font-weight: 700;
                border-bottom: 1px solid rgba(255,255,255,0.2);
                padding-bottom: 8px;
                margin-bottom: 4px;
                cursor: default;
            }

            #auto-celeb-popup-title {
                cursor: pointer;
                user-select: none;
                flex-grow: 1;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            #auto-celeb-title-icon {
                width: 22px;
                height: 22px;
                border-radius: 5px;
            }

            #auto-celeb-collapse-toggle {
                font-size: 20px;
                font-weight: bold;
                cursor: pointer;
                padding: 0 5px;
                transition: transform 0.3s ease;
            }
            #auto-celeb-collapse-toggle:hover {
                opacity: 0.8;
            }

            #auto-celeb-main-container.collapsed {
                max-height: 48px;
                padding-top: 12px;
                padding-bottom: 12px;
                gap: 0;
            }
            #auto-celeb-main-container.collapsed #auto-celeb-popup-header {
                margin-bottom: 0;
                border-bottom: none;
                padding-bottom: 0;
            }
            #auto-celeb-main-container.collapsed #auto-celeb-collapse-toggle {
                transform: rotate(-90deg);
            }
            #auto-celeb-main-container.collapsed > *:not(#auto-celeb-popup-header) {
                display: none;
            }

            /* ===== M·ªöI: Tr·∫°ng th√°i Kh√≥a (Locked) ===== */
            #auto-celeb-main-container.locked #auto-celeb-control-button,
            #auto-celeb-main-container.locked #auto-celeb-timer-ui,
            #auto-celeb-main-container.locked #auto-celeb-log-wrapper,
            #auto-celeb-main-container.locked #auto-celeb-redirect-button {
                display: none;
            }
            #auto-celeb-main-container:not(.locked) #auto-celeb-key-wall {
                display: none;
            }

            /* ===== M·ªöI: Giao di·ªán Key Wall ===== */
            #auto-celeb-key-wall {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 15px;
                padding: 10px 0;
            }
            #key-wall-icon {
                width: 64px;
                height: 64px;
                opacity: 0.9;
                border-radius: 12px;
            }
            #key-wall-title {
                font-size: 22px;
                font-weight: 700;
                color: white;
                margin: 0;
            }
            #key-wall-message {
                font-size: 14px;
                color: #e0e0e0;
                text-align: center;
                line-height: 1.5;
                margin: 0;
            }
            #btn-get-key {
                display: flex;
                align-items: center;
                gap: 8px;
                width: 100%;
                padding: 12px 14px;
                border-radius: 14px;
                border: none;
                color: white;
                font-weight: 600;
                font-size: 16px;
                cursor: pointer;
                background: linear-gradient(135deg, #00B2FF, #006AFF); /* Messenger Blue */
                box-shadow: 0 6px 20px rgba(0, 150, 255, 0.4);
                transition: all 0.25s ease;
                justify-content: center;
                text-decoration: none;
            }
            #btn-get-key:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0, 150, 255, 0.55);
            }
            #key-input-field {
                width: 100%;
                background: rgba(0,0,0,0.3);
                border: 1px solid rgba(255,255,255,0.2);
                border-radius: 10px;
                padding: 12px 15px;
                font-size: 16px;
                color: white;
                font-family: 'Inter', sans-serif;
                box-sizing: border-box;
            }
            #key-input-field::placeholder {
                color: #888;
            }
            #btn-submit-key {
                width: 100%;
                padding: 12px 14px;
                border-radius: 14px;
                border: none;
                color: white;
                font-weight: 600;
                font-size: 16px;
                cursor: pointer;
                background: linear-gradient(135deg, #8b5cf6, #6d28d9); /* Purple */
                box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
                transition: all 0.25s ease;
            }
            #btn-submit-key:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(139, 92, 246, 0.55);
            }
            #key-error-message {
                font-size: 14px;
                color: #ef4444; /* red-500 */
                font-weight: 600;
                margin: -5px 0 0 0;
                display: none; /* ·∫®n ban ƒë·∫ßu */
            }
            @keyframes shake {
                0%, 100% { transform: translateX(0); }
                25% { transform: translateX(-5px); }
                75% { transform: translateX(5px); }
            }
            .shake {
                animation: shake 0.3s ease;
                border-color: #ef4444 !important;
            }

            /* --- H·∫æT Giao di·ªán Key Wall --- */

            #auto-celeb-control-button {
                width: 100%; padding: 12px 14px; border-radius: 14px; border: none;
                color: white; font-weight: 600; font-size: 16px; cursor: pointer;
                background: linear-gradient(135deg, #22c55e, #16a34a);
                box-shadow: 0 6px 20px rgba(34,197,94,0.4);
                transition: all 0.25s ease;
            }
            #auto-celeb-control-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(34,197,94,0.55);
                filter: brightness(1.1);
            }
            #auto-celeb-control-button.running {
                background: linear-gradient(135deg, #ef4444, #dc2626);
                box-shadow: 0 6px 20px rgba(239,68,68,0.4);
            }

            #auto-celeb-redirect-button {
                width: 100%; padding: 12px 14px; border-radius: 14px; border: none;
                color: white; font-weight: 600; font-size: 16px; cursor: pointer;
                background: linear-gradient(135deg, #0ea5e9, #0284c7);
                box-shadow: 0 6px 20px rgba(14, 165, 233, 0.4);
                transition: all 0.25s ease;
            }
            #auto-celeb-redirect-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(14, 165, 233, 0.55);
                filter: brightness(1.1);
            }

            #auto-celeb-timer-ui {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 10px 15px;
                border-radius: 14px;
                color: white;
                font-weight: 600;
                backdrop-filter: blur(15px);
                background: rgba(30,30,30,0.45);
                border: 1px solid rgba(255,255,255,0.15);
                box-shadow: 0 6px 16px rgba(0,0,0,0.25);
                user-select: none;
                transition: all 0.3s ease;
                height: 65px;
            }
            #timer-display-group { display: flex; align-items: center; gap: 10px; }
            #timer-display {
                font-family: 'JetBrains Mono', 'Inter', 'Segoe UI', sans-serif;
                font-size: 32px;
                font-weight: 500;
                letter-spacing: -1px;
                color: #e0e0e0;
                flex-shrink: 0;
                min-width: 80px;
                transition: all 0.2s ease;
                text-align: left;
            }
            #timer-adjust-buttons { display: flex; flex-direction: column; gap: 2px; }
            .timer-adjust-btn {
                background-color: rgba(255,255,255,0.1);
                color: #fff;
                font-size: 13px;
                font-weight: 700;
                padding: 2px 8px;
                border-radius: 8px;
                cursor: pointer;
                transition: background-color 0.2s ease, transform 0.1s ease;
                min-width: 38px;
                text-align: center;
            }
            .timer-adjust-btn:hover { background-color: rgba(255,255,255,0.2); transform: scale(1.05); }
            .timer-adjust-btn:active { transform: scale(0.95); }
            #timer-progress-ring { width: 40px; height: 40px; transform: rotate(-90deg); flex-shrink: 0; }
            .timer-ring-bg, .timer-ring-fg { fill: transparent; stroke-width: 4; }
            .timer-ring-bg { stroke: rgba(255, 255, 255, 0.15); }
            .timer-ring-fg { stroke: #0ea5e9; stroke-linecap: round; transition: stroke-dashoffset 0.5s linear; }
            #timer-toggle-switch { position: relative; display: inline-block; width: 50px; height: 30px; flex-shrink: 0; }
            .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); white-space: nowrap; border-width: 0; }
            .toggle-switch-label { display: block; width: 100%; height: 100%; background-color: #8e8e93; border-radius: 15px; cursor: pointer; transition: background-color 0.2s ease; }
            .toggle-switch-handle { position: absolute; top: 2px; left: 2px; width: 26px; height: 26px; background: #fff; border-radius: 50%; box-shadow: 0 1px 3px rgba(0,0,0,0.3); transition: transform 0.2s ease; }
            #timer-toggle-input:checked + .toggle-switch-label { background-color: #34c759; }
            #timer-toggle-input:checked + .toggle-switch-label .toggle-switch-handle { transform: translateX(20px); }

            #auto-celeb-timer-ui.timer-counting #timer-display-group { flex-grow: 1; justify-content: center; gap: 15px; }
            #auto-celeb-timer-ui.timer-counting #timer-display { color: #0ea5e9; font-weight: 700; font-size: 38px; text-align: left; flex-grow: 0; }
            #auto-celeb-timer-ui.timer-counting #timer-adjust-buttons,
            #auto-celeb-timer-ui.timer-counting #timer-toggle-switch { display: none; }

            #auto-celeb-timer-ui:not(.timer-counting) #timer-progress-ring { display: none; }
            #auto-celeb-timer-ui:not(.timer-counting) #timer-display { font-size: 32px; text-align: left; flex-grow: 0; min-width: 90px; }
            #auto-celeb-timer-ui:not(.timer-counting) #timer-adjust-buttons { display: flex; }
            #auto-celeb-timer-ui:not(.timer-counting) #timer-toggle-switch { display: inline-block; }

            #auto-celeb-log-wrapper { display: flex; flex-direction: column; flex-grow: 1; overflow: hidden; min-height: 150px; }
            #auto-celeb-log-wrapper label { color: white; font-weight: bold; text-align: center; margin-bottom: 5px; display: block; user-select: none; }
            #auto-celeb-script-log {
                width: 100%; resize: none; margin: 0;
                font-family: Consolas, 'Courier New', monospace;
                font-size: 12px; font-weight: bold;
                background-color: #111; color: #eee;
                border: 1px solid #444; border-radius: 8px;
                box-sizing: border-box; padding: 8px;
                flex-grow: 1;
                height: 240px;
            }

            #auto-celeb-footer-buttons {
                display: flex;
                justify-content: space-between;
                gap: 8px;
                margin-top: 5px;
            }
            .footer-btn {
                flex-grow: 1;
                padding: 6px;
                border: none;
                border-radius: 5px;
                color: white;
                cursor: pointer;
                font-weight: bold;
                transition: all 0.2s ease;
                font-size: 13px;
            }
            .footer-btn:hover {
                opacity: 0.8;
                transform: translateY(-1px);
            }
            #btn-update { background-color: #0ea5e9; } /* Blue */
            #btn-bug-report { background-color: #f59e0b; } /* Yellow */
            #btn-donate { background-color: #22c55e; } /* Green */

            #auto-celeb-modal-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.7);
                backdrop-filter: blur(5px);
                z-index: 10001;
            }
            .auto-celeb-modal {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: #2c2c2e;
                color: white;
                border-radius: 14px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.5);
                z-index: 10002;
                width: 300px;
                padding: 20px;
                padding-top: 40px;
                text-align: center;
                border: 1px solid rgba(255,255,255,0.15);
            }
            .auto-celeb-modal h3 {
                margin-top: 0;
                margin-bottom: 15px;
            }
            .auto-celeb-modal-close {
                position: absolute;
                top: 10px;
                right: 15px;
                font-size: 28px;
                font-weight: bold;
                color: #aaa;
                cursor: pointer;
                line-height: 1;
            }
            .auto-celeb-modal-close:hover {
                color: white;
            }
            .modal-button {
                display: inline-block;
                background-color: #0a84ff;
                color: white;
                padding: 10px 20px;
                border-radius: 8px;
                text-decoration: none;
                font-weight: 600;
                margin-top: 10px;
            }
            .modal-button:hover {
                background-color: #38a0ff;
            }

            #auto-celeb-popup-container {
                position: fixed;
                top: 80px;
                right: 25px;
                z-index: 10000;
                display: flex;
                flex-direction: column;
                align-items: flex-end;
                gap: 12px;
                pointer-events: none;
            }
            .celeb-popup-item {
                background: rgba(30,30,30,0.65);
                backdrop-filter: blur(15px);
                color: #e5e7eb;
                padding: 12px 18px;
                border-radius: 16px;
                box-shadow: 0 8px 30px rgba(0,0,0,0.3);
                border: 1px solid rgba(255,255,255,0.15);
                font-size: 15px;
                animation: slideInFadeIn 0.5s forwards, fadeOut 0.5s 3.5s forwards;
                transform: translateX(100%);
                opacity: 0;
            }
            .celeb-popup-item .celeb-name { font-weight: 700; color: #ffffff; }
            .celeb-popup-item .celeb-count { font-size: 13px; opacity: 0.75; margin-right: 8px; }
            @keyframes slideInFadeIn { to { opacity: 1; transform: translateX(0); } }
            @keyframes fadeOut { from { opacity: 1; transform: translateX(0); } to { opacity: 0; transform: translateX(50%); } }
        `;
        document.head.appendChild(style);
    }

    /**
     * T·∫°o B·∫£ng ƒëi·ªÅu khi·ªÉn CH√çNH (ƒê√É C·∫¨P NH·∫¨T - Th√™m Key Wall)
     */
    function createMainControlUI() {
        const container = document.createElement('div');
        container.id = 'auto-celeb-main-container';

        // 1. Th√™m Header (Hi·ªÉn th·ªã tr√™n m·ªçi trang)
        container.innerHTML = `
            <div id="auto-celeb-popup-header">
                <span id="auto-celeb-popup-title">
                    <img src="${CONFIG.LOGO_URL}" id="auto-celeb-title-icon">
                    Locket Celebrity
                </span>
                <span id="auto-celeb-collapse-toggle">&#9660;</span>
            </div>
        `;

        // 2. M·ªöI: Th√™m Key Wall (Lu√¥n th√™m, nh∆∞ng s·∫Ω b·ªã ·∫©n/hi·ªán b·∫±ng CSS)
        const keyWall = document.createElement('div');
        keyWall.id = 'auto-celeb-key-wall';
        keyWall.innerHTML = `
            <img id="key-wall-icon" src="${CONFIG.LOGO_URL}" alt="Logo">
            <h3 id="key-wall-title">K√≠ch ho·∫°t Script</h3>
            <p id="key-wall-message">ƒê·ªÉ s·ª≠ d·ª•ng script, vui l√≤ng nh·∫≠p key k√≠ch ho·∫°t.<br>Truy c·∫≠p k√™nh chat messenger ƒë·ªÉ nh·∫≠n key.</p>
            <a id="btn-get-key" href="${CONFIG.MESSENGER_LINK}" target="_blank">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="flex-shrink: 0;"><path fill-rule="evenodd" clip-rule="evenodd" d="M12 2C6.477 2 2 6.477 2 12C2 17.523 6.477 22 12 22C13.245 22 14.453 21.801 15.58 21.434C16.035 21.289 16.538 21.414 16.829 21.78C17.72 22.88 19.347 24 21.362 23.86C21.6 23.836 21.821 23.67 21.93 23.44C22.04 23.21 22.023 22.943 21.884 22.73C20.69 20.82 19.998 18.52 20.002 16.06C20.002 16.03 20 15.998 20 15.967C21.232 14.636 22 12.902 22 11C22 6.029 17.523 2 12 2ZM12.002 12.668C11.383 12.668 10.835 12.92 10.45 13.332L6.151 9.032C6.46 8.711 6.84 8.441 7.27 8.232C7.699 8.022 8.169 7.882 8.66 7.822C9.151 7.761 9.652 7.782 10.133 7.885C10.614 7.989 11.065 8.175 11.464 8.435L12.002 8.788L15.54 10.888C15.3 11.198 15.01 11.478 14.68 11.718C14.349 11.958 13.98 12.158 13.582 12.308C13.183 12.459 12.76 12.56 12.321 12.608C11.882 12.657 11.433 12.653 11 12.597L10.99 12.592L12.002 12.668ZM15.849 13.332C15.54 13.021 15.16 12.751 14.73 12.542C14.301 12.332 13.831 12.192 13.34 12.132C12.849 12.071 12.348 12.092 11.867 12.195C11.386 12.3 10.935 12.485 10.536 12.745L10 13.098L6.46 15.198C6.7 15.508 6.99 15.789 7.32 16.029C7.651 16.269 8.02 16.469 8.418 16.619C8.817 16.769 9.24 16.87 9.679 16.918C10.118 16.967 10.567 16.963 11 16.907L11.01 16.892L17.849 13.332L15.849 13.332Z" fill="white"/></svg>
                L·∫•y Key t·∫°i Messenger
            </a>
            <input type="text" id="key-input-field" placeholder="Nh·∫≠p key...">
            <button id="btn-submit-key">X√°c th·ª±c Key</button>
            <p id="key-error-message">Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.</p>
        `;
        container.appendChild(keyWall);

        // 3. Th√™m n·ªôi dung t√πy theo trang
        if (window.location.href === CONFIG.TARGET_PAGE) {
            // ----- GIAO DI·ªÜN ƒê·∫¶Y ƒê·ª¶ (Trang celebrity.html) -----
            const controlButton = document.createElement('button');
            controlButton.id = 'auto-celeb-control-button';
            container.appendChild(controlButton);

            const timerUI = document.createElement('div');
            timerUI.id = 'auto-celeb-timer-ui';
            timerUI.innerHTML = `
                <div id="timer-display-group">
                    <svg id="timer-progress-ring" viewBox="0 0 40 40">
                        <circle class="timer-ring-bg" cx="20" cy="20" r="18"></circle>
                        <circle class="timer-ring-fg" cx="20" cy="20" r="18"></circle>
                    </svg>
                    <span id="timer-display">00:00</span>
                    <div id="timer-adjust-buttons">
                        <span id="timer-plus-btn" class="timer-adjust-btn">+5</span>
                        <span id="timer-minus-btn" class="timer-adjust-btn">-5</span>
                    </div>
                </div>
                <div id="timer-toggle-switch">
                    <input type="checkbox" id="timer-toggle-input" class="sr-only">
                    <label for="timer-toggle-input" class="toggle-switch-label">
                        <span class="toggle-switch-handle"></span>
                    </label>
                </div>
            `;
            container.appendChild(timerUI);

            const logWrapper = document.createElement('div');
            logWrapper.id = 'auto-celeb-log-wrapper';
            logWrapper.innerHTML = `
                <label>Nh·∫≠t k√Ω h·ªá th·ªëng (Script)</label>
                <textarea id="auto-celeb-script-log" rows="10" disabled=""></textarea>
                <div id="auto-celeb-footer-buttons">
                    <button id="btn-update" class="footer-btn">Update</button>
                    <button id="btn-bug-report" class="footer-btn">B√°o l·ªói</button>
                    <button id="btn-donate" class="footer-btn">Donate</button>
                </div>
            `;
            container.appendChild(logWrapper);

        } else {
            // ----- GIAO DI·ªÜN T·ªêI GI·∫¢N (C√°c trang kh√°c) -----
            const redirectButton = document.createElement('button');
            redirectButton.id = 'auto-celeb-redirect-button';
            redirectButton.textContent = '‚û°Ô∏è V·ªÅ trang Celebrity';
            container.appendChild(redirectButton);
        }

        // 4. Th√™m container v√†o trang
        document.body.appendChild(container);

        // 5. M·ªöI: Th√™m HTML cho Modals (·∫©n ban ƒë·∫ßu) - Th√™m v√†o body
        const modalContainer = document.createElement('div');
        modalContainer.innerHTML = `
            <div id="auto-celeb-modal-overlay" style="display: none;"></div>

            <div id="modal-bug-report" class="auto-celeb-modal" style="display: none;">
                <span class="auto-celeb-modal-close">&times;</span>
                <h3>B√°o l·ªói</h3>
                <p style="text-align: center;">N·∫øu b·∫°n g·∫∑p l·ªói, vui l√≤ng b√°o cho t√¥i qua Messenger:</p>
                <a href="${CONFIG.MESSENGER_LINK}" target="_blank" class="modal-button">Chat tr√™n Messenger</a>
            </div>
        `;
        document.body.appendChild(modalContainer);
    }

    /**
     * C·∫≠p nh·∫≠t N√∫t B·∫Øt ƒë·∫ßu/D·ª´ng
     */
    function updateControlButtonState(state) {
        const button = document.getElementById('auto-celeb-control-button');
        if (!button) return;
        if (state.isRunning) {
            button.textContent = 'D·ª´ng Auto Celeb';
            button.classList.add('running');
        } else {
            button.textContent = 'B·∫Øt ƒë·∫ßu Auto Celeb';
            button.classList.remove('running');
        }
    }

    /**
     * C·∫≠p nh·∫≠t UI Timer
     */
    function updateTimerUI(mode, value) {
        const timerUI = document.getElementById('auto-celeb-timer-ui');
        if (!timerUI) return;

        const display = document.getElementById('timer-display');
        const toggleInput = document.getElementById('timer-toggle-input');
        const ringFg = document.querySelector('#timer-progress-ring .timer-ring-fg');

        if (!display || !toggleInput || !ringFg) return;

        timerUI.classList.remove('timer-counting');

        const radius = ringFg.r.baseVal.value;
        const circumference = 2 * Math.PI * radius;
        ringFg.style.strokeDasharray = `${circumference}`;

        if (mode === 'counting') {
            timerUI.classList.add('timer-counting');
            display.textContent = formatTimeWithHours(value);
            toggleInput.checked = true;

            const percentageElapsed = (currentTimerTotalDuration - value) / currentTimerTotalDuration;
            const offset = circumference * (1 - percentageElapsed);

            ringFg.style.strokeDashoffset = offset;

        } else {
            display.textContent = `${currentTimerConfig.minutes.toString().padStart(2, '0')}:00`;
            toggleInput.checked = currentTimerConfig.enabled;
            ringFg.style.strokeDashoffset = circumference;
        }
    }


    // --- Ch·ª©c nƒÉng H·∫πn gi·ªù T·ª± Reset ---

    function loadTimerConfig() {
        const configStr = localStorage.getItem(CONFIG.TIMER_CONFIG_KEY);
        if (configStr) {
            const savedConfig = JSON.parse(configStr);
            currentTimerConfig.minutes = savedConfig.minutes || 60;
            currentTimerConfig.enabled = savedConfig.enabled || false;
        } else {
            currentTimerConfig.minutes = 60;
            currentTimerConfig.enabled = false;
        }

        if (document.getElementById('auto-celeb-timer-ui')) {
            const activeTimerEndTime = sessionStorage.getItem(CONFIG.TIMER_END_TIME_KEY);
            if (!activeTimerEndTime) {
                updateTimerUI();
            }
        }
    }

    function saveTimerConfig() {
        const configToSave = {
            minutes: currentTimerConfig.minutes,
            enabled: currentTimerConfig.enabled
        };
        localStorage.setItem(CONFIG.TIMER_CONFIG_KEY, JSON.stringify(configToSave));
    }

    /**
     * C√†i ƒë·∫∑t TO√ÄN B·ªò ƒëi·ªÅu khi·ªÉn UI (ƒê√É C·∫¨P NH·∫¨T - S·ª≠a logic Key Wall)
     */
    function setupMainUIControls() {
        // --- ƒêi·ªÅu khi·ªÉn chung (cho m·ªçi trang) ---
        const mainContainer = document.getElementById('auto-celeb-main-container');
        const collapseToggle = document.getElementById('auto-celeb-collapse-toggle');
        const popupTitle = document.getElementById('auto-celeb-popup-title');

        const toggleCollapse = (e) => {
            mainContainer.classList.toggle('collapsed');
        };

        if (collapseToggle && mainContainer) {
            collapseToggle.addEventListener('click', toggleCollapse);
        }
        if (popupTitle && mainContainer) {
            popupTitle.addEventListener('click', toggleCollapse);
        }

        // --- M·ªöI: Logic cho Key Wall (lu√¥n ch·∫°y) ---
        const btnSubmitKey = document.getElementById('btn-submit-key');
        const keyInput = document.getElementById('key-input-field');
        const keyError = document.getElementById('key-error-message');

        const validateKey = () => {
            const inputVal = keyInput.value.trim();
            if (inputVal === CONFIG.SECRET_KEY) {
                // ƒê√öNG KEY
                // *** S·ª¨A L·ªñI: L∆∞u key th·∫≠t, kh√¥ng l∆∞u 'true' ***
                localStorage.setItem(CONFIG.KEY_STORAGE_KEY, inputVal);
                mainContainer.classList.remove('locked');
                alert('K√≠ch ho·∫°t th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng.');
                keyError.style.display = 'none';
                keyInput.classList.remove('shake');
            } else {
                // SAI KEY
                keyError.style.display = 'block';
                keyInput.classList.add('shake');
                setTimeout(() => keyInput.classList.remove('shake'), 300);
            }
        };

        if(btnSubmitKey && keyInput && keyError) {
            btnSubmitKey.addEventListener('click', validateKey);
            // Cho ph√©p nh·∫•n Enter ƒë·ªÉ x√°c th·ª±c
            keyInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    validateKey();
                }
            });
        }

        // N√∫t "L·∫•y Key" kh√¥ng c·∫ßn listener v√¨ n√≥ l√† th·∫ª <a> v·ªõi target="_blank"

        // --- M·ªöI: ƒêi·ªÅu khi·ªÉn cho trang kh√°c ---
        const redirectButton = document.getElementById('auto-celeb-redirect-button');
        if (redirectButton) {
            redirectButton.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('[Auto Locket Celeb] ‚û°Ô∏è ƒêang chuy·ªÉn h∆∞·ªõng v·ªÅ celebrity.html...');
                window.location.href = CONFIG.TARGET_PAGE;
            });
        }

        // --- ƒêi·ªÅu khi·ªÉn ch·ªâ d√†nh cho trang celebrity.html ---
        const plusBtn = document.getElementById('timer-plus-btn');
        const minusBtn = document.getElementById('timer-minus-btn');
        const toggleInput = document.getElementById('timer-toggle-input');
        const timerUI = document.getElementById('auto-celeb-timer-ui');

        if (plusBtn && minusBtn && toggleInput && timerUI) {
            plusBtn.addEventListener('click', (event) => {
                event.stopPropagation();
                if (activeTimerId) return;
                currentTimerConfig.minutes += 5;
                log(`TƒÉng th·ªùi gian h·∫πn gi·ªù l√™n: ${currentTimerConfig.minutes} ph√∫t.`, 'timer');
                saveTimerConfig();
                updateTimerUI();
            });

            minusBtn.addEventListener('click', (event) => {
                event.stopPropagation();
                if (activeTimerId) return;
                if (currentTimerConfig.minutes > 5) {
                    currentTimerConfig.minutes -= 5;
                    log(`Gi·∫£m th·ªùi gian h·∫πn gi·ªù xu·ªëng: ${currentTimerConfig.minutes} ph√∫t.`, 'timer');
                } else {
                    currentTimerConfig.minutes = 5;
                    log(`Th·ªùi gian h·∫πn gi·ªù t·ªëi thi·ªÉu l√† 5 ph√∫t.`, 'timer');
                }
                saveTimerConfig();
                updateTimerUI();
            });

            toggleInput.addEventListener('change', (event) => {
                event.stopPropagation();
                if (activeTimerId) {
                    toggleInput.checked = true;
                    return;
                }
                currentTimerConfig.enabled = toggleInput.checked;
                log(`H·∫πn gi·ªù ${currentTimerConfig.enabled ? 'ƒê√É B·∫¨T' : 'ƒê√É T·∫ÆT'}.`, 'timer');
                saveTimerConfig();
                updateTimerUI();
            });

            timerUI.addEventListener('click', (event) => {
                if (!event.target.closest('.timer-adjust-btn') && !event.target.closest('#timer-toggle-switch')) {
                    if (window.location.href !== CONFIG.TARGET_PAGE) {
                        log('ƒêang ·ªü trang kh√°c. Chuy·ªÉn h∆∞·ªõng v·ªÅ celebrity.html...');
                        window.location.href = CONFIG.TARGET_PAGE;
                    }
                }
            });
        }

        // --- M·ªöI: Logic cho c√°c n√∫t footer v√† modals ---
        const btnUpdate = document.getElementById('btn-update');
        const btnBugReport = document.getElementById('btn-bug-report');
        const btnDonate = document.getElementById('btn-donate'); // N√∫t n√†y v·∫´n t·ªìn t·∫°i

        const modalOverlay = document.getElementById('auto-celeb-modal-overlay');
        const modalBug = document.getElementById('modal-bug-report');
        const allModals = document.querySelectorAll('.auto-celeb-modal');
        const allCloseButtons = document.querySelectorAll('.auto-celeb-modal-close');

        // H√†m helper ƒë·ªÉ ƒë√≥ng t·∫•t c·∫£ modal
        const closeAllModals = () => {
            if (modalOverlay) modalOverlay.style.display = 'none';
            allModals.forEach(modal => {
                if (modal) modal.style.display = 'none';
            });
        };

        // N√∫t Update
        if (btnUpdate) {
            btnUpdate.addEventListener('click', (e) => {
                e.preventDefault();
                window.open('https://raw.githubusercontent.com/huyvu2512/locket-celebrity/main/tampermonkey.user.js', '_blank');
            });
        }

        // N√∫t B√°o l·ªói
        if (btnBugReport && modalBug && modalOverlay) {
            btnBugReport.addEventListener('click', (e) => {
                e.preventDefault();
                modalOverlay.style.display = 'block';
                modalBug.style.display = 'block';
            });
        }

        // N√∫t Donate (T·ªìn t·∫°i nh∆∞ng kh√¥ng l√†m g√¨)
        if (btnDonate) {
            // Kh√¥ng th√™m event listener
        }

        // S·ª± ki·ªán ƒë√≥ng modal
        if (modalOverlay) modalOverlay.addEventListener('click', closeAllModals);
        allCloseButtons.forEach(btn => btn.addEventListener('click', closeAllModals));
    }


    /**
     * M·ªöI: ƒê·ªãnh d·∫°ng th·ªùi gian th√†nh HH:MM:SS
     */
    function formatTimeWithHours(totalSeconds) {
        const absSeconds = Math.abs(totalSeconds);
        const hours = Math.floor(absSeconds / 3600);
        const minutes = Math.floor((absSeconds % 3600) / 60);
        const seconds = Math.floor(absSeconds % 60);

        const sign = totalSeconds < 0 ? '-' : '';

        return `${sign}${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    // --- C√ÅC H√ÄM LOGIC CH√çNH ---

    function startReloadTimer(minutes) {
        currentTimerTotalDuration = minutes * 60;

        if (activeTimerId) clearInterval(activeTimerId);
        let endTimeStr = sessionStorage.getItem(CONFIG.TIMER_END_TIME_KEY);
        let endTime;
        if (!endTimeStr) {
            const durationInSeconds = currentTimerTotalDuration;
            endTime = Date.now() + durationInSeconds * 1000;
            sessionStorage.setItem(CONFIG.TIMER_END_TIME_KEY, endTime.toString());
            log(`ƒê√£ B·∫ÆT ƒê·∫¶U ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c. Reset sau ${minutes} ph√∫t.`, 'timer');
        } else {
            endTime = parseInt(endTimeStr, 10);
            const remainingMinutes = ((endTime - Date.now()) / 60000).toFixed(1);
            log(`ƒê√£ TI·∫æP T·ª§C ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c (c√≤n ${remainingMinutes} ph√∫t).`, 'timer');
        }
        function updateCountdown() {
            const now = Date.now();
            const secondsRemaining = (endTime - now) / 1000;
            if (secondsRemaining <= 0) {
                clearInterval(activeTimerId);
                activeTimerId = null;
                sessionStorage.removeItem(CONFIG.TIMER_END_TIME_KEY);
                updateTimerUI('counting', 0);
                executeTimerReset();
            } else {
                updateTimerUI('counting', secondsRemaining);
            }
        }
        updateCountdown();
        activeTimerId = setInterval(updateCountdown, 1000);
    }

    function cancelReloadTimer() {
        if (webLogObserver) clearInterval(webLogObserver); // <-- M·ªöI: D·ª´ng theo d√µi
        if (activeTimerId) {
            clearInterval(activeTimerId);
            activeTimerId = null;
            log('ƒê√£ h·ªßy ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c.', 'info');
            updateTimerUI();
        }
        sessionStorage.removeItem(CONFIG.TIMER_END_TIME_KEY);
    }

    function executeTimerReset() {
        if (webLogObserver) clearInterval(webLogObserver); // <-- M·ªöI: D·ª´ng theo d√µi
        log('H·∫πn gi·ªù k·∫øt th√∫c. ƒêANG ƒê·∫∂T C·ªú RESTART V√Ä T·∫¢I L·∫†I TRANG...', 'timer');
        localStorage.setItem(CONFIG.TIMER_RESTART_KEY, 'true');
        sessionStorage.removeItem(CONFIG.STORAGE_KEY);
        sessionStorage.removeItem(CONFIG.TIMER_END_TIME_KEY);
        location.reload();
    }

    /**
     * S·ª¨A L·∫†I: H√†m n√†y s·∫Ω ki·ªÉm tra c·∫£ 2 lo·∫°i popup
     */
    function closeNotificationPopup() {
        // 1. Logic c≈© ƒë·ªÉ ƒë√≥ng #notificationPopup
        try {
            const oldCloseButton = document.querySelector('#notificationPopup .close, #notificationPopup [data-dismiss="modal"]');
            const oldPopup = document.querySelector('#notificationPopup');
            if (oldCloseButton && oldPopup?.style.display !== 'none') {
                log('Ph√°t hi·ªán popup th√¥ng b√°o c≈©. T·ª± ƒë·ªông ƒë√≥ng...', 'info');
                oldCloseButton.click();
            }
        } catch (e) { /* B·ªè qua l·ªói */ }

        // 2. Logic M·ªöI ƒë·ªÉ ƒë√≥ng "TH√îNG B√ÅO QUAN TR·ªåNG"
        try {
            const allTitles = document.querySelectorAll('h5, h4, strong, div.modal-title');
            let titleElement = null;
            for (const el of allTitles) {
                if (el.textContent.trim() === 'TH√îNG B√ÅO QUAN TR·ªåNG') {
                    titleElement = el;
                    break;
                }
            }

            if (!titleElement) return; // Kh√¥ng t√¨m th·∫•y, tho√°t

            const modal = titleElement.closest('.modal, .modal-dialog, .modal-content');
            if (modal && (modal.style.display !== 'none' && !modal.classList.contains('hidden'))) {

                const buttons = modal.querySelectorAll('button, a');
                for (const btn of buttons) {
                    if (btn.textContent.trim() === 'ƒê√≥ng') {
                        log('Ph√°t hi·ªán "Th√¥ng B√°o Quan Tr·ªçng". T·ª± ƒë·ªông ƒë√≥ng...', 'info');
                        btn.click();
                        return; // ƒê√£ click, tho√°t
                    }
                }
            }
        } catch (e) { /* B·ªè qua l·ªói */ }
    }


    function scrollToCelebSection() {
        const section = document.getElementById('usernameSearch');
        if (section) {
            section.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function waitForElementById(elementId, timeout = 180000, interval = 500) {
        return new Promise((resolve, reject) => {
            let elapsedTime = 0;
            const check = () => {
                const element = document.getElementById(elementId);
                if (element) {
                    resolve(element);
                } else {
                    elapsedTime += interval;
                    if (elapsedTime >= timeout) {
                        log(`H·∫øt th·ªùi gian ch·ªù element ID: ${elementId}`, 'error');
                        reject(new Error(`Timeout waiting for element ID: ${elementId}`));
                    } else {
                        setTimeout(check, interval);
                    }
                }
            };
            check();
        });
    }

    /**
     * M·ªöI: H√†m theo d√µi log web (ƒê√É S·ª¨A L·ªñI)
     */
    async function startRealtimeLogObserver(celebId) {
        if (webLogObserver) {
            clearInterval(webLogObserver);
            webLogObserver = null;
        }

        const webLogId = celebId + '_log';
        let webLogTextarea;
        try {
            // Ch·ªù cho textarea log c·ªßa web xu·∫•t hi·ªán
            webLogTextarea = await waitForElementById(webLogId, 10000, 250);
        } catch (e) {
            log(`Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω web (${webLogId}). Kh√¥ng th·ªÉ ƒë·ªìng b·ªô real-time.`, 'warn');
            return;
        }

        const scriptLog = document.getElementById('auto-celeb-script-log');
        if (!scriptLog) return; // Tho√°t n·∫øu kh√¥ng c√≥ script log

        log(`B·∫Øt ƒë·∫ßu theo d√µi nh·∫≠t k√Ω c·ªßa ${celebId}...`, 'info');

        let lastLogContent = ""; // <-- Reset khi b·∫Øt ƒë·∫ßu theo d√µi

        webLogObserver = setInterval(() => {
            const currentScriptLog = document.getElementById('auto-celeb-script-log');
            const currentWebLog = document.getElementById(webLogId); // L·∫•y l·∫°i DOM

            if (!currentScriptLog || !currentWebLog) {
                clearInterval(webLogObserver);
                webLogObserver = null;
                return;
            }

            const newLogContent = currentWebLog.value;

            // --- LOGIC M·ªöI ƒê√É S·ª¨A L·ªñI ---
            if (newLogContent === lastLogContent) {
                return; // Kh√¥ng c√≥ g√¨ thay ƒë·ªïi
            }

            if (newLogContent.length > lastLogContent.length) {
                // Tr∆∞·ªùng h·ª£p B√åNH TH∆Ø·ªúNG: Log ƒë∆∞·ª£c th√™m v√†o
                const addedText = newLogContent.substring(lastLogContent.length);
                currentScriptLog.value += addedText;
                lastLogContent = newLogContent;
                currentScriptLog.scrollTop = currentScriptLog.scrollHeight;
            } else if (newLogContent.length < lastLogContent.length) {
                // Tr∆∞·ªùng h·ª£p ƒê·∫∂C BI·ªÜT: Log ƒë√£ b·ªã X√ìA v√† ghi l·∫°i (khi nh·∫•n "B·∫Øt ƒë·∫ßu")
                currentScriptLog.value += newLogContent; // Th√™m to√†n b·ªô n·ªôi dung m·ªõi
                lastLogContent = newLogContent; // ƒê·∫∑t l·∫°i baseline
                currentScriptLog.scrollTop = currentScriptLog.scrollHeight;
            }
            // --- H·∫æT LOGIC M·ªöI ---

        }, 500); // Ki·ªÉm tra m·ªói 0.5 gi√¢y
    }


    async function processNextCeleb(celebIds, totalCount) {
        if (webLogObserver) {
            clearInterval(webLogObserver);
            webLogObserver = null;
        }

        const state = JSON.parse(sessionStorage.getItem(CONFIG.STORAGE_KEY) || '{}');
        if (!state.isRunning) {
            log('Qu√° tr√¨nh ƒë√£ ƒë∆∞·ª£c d·ª´ng l·∫°i.', 'info');
            return;
        }
        if (celebIds.length === 0) {
            sessionStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify({ ...state, finished: true }));
            updateControlButtonState({ isRunning: true });
            return;
        }
        const currentId = celebIds.shift();
        sessionStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify({ isRunning: true, celebIds: [...celebIds], totalCount: totalCount }));
        let parentElement;
        try {
            const elementId = currentId + '_parentElement';
            parentElement = await waitForElementById(elementId, 180000, 500);
        } catch (error) {
            log(`Kh√¥ng t√¨m th·∫•y container cho celeb ID: ${currentId} (sau 3 ph√∫t ch·ªù). B·ªè qua.`, 'error');
            await processNextCeleb(celebIds, totalCount);
            return;
        }
        if (!parentElement) {
            log(`Kh√¥ng t√¨m th·∫•y container cho celeb ID: ${currentId}. B·ªè qua.`, 'error');
            await processNextCeleb(celebIds, totalCount);
            return;
        }
        const profileDiv = parentElement.closest('.profile');
        const button = profileDiv ? profileDiv.querySelector('button.showMoreBtn') : null;
        const nameElement = profileDiv ? profileDiv.querySelector('.profile-name') : null;
        const celebName = nameElement ? nameElement.textContent.trim() : `ID: ${currentId}`;
        const processedCount = totalCount - celebIds.length;
        const countText = `(${processedCount}/${totalCount})`;
        if (!button || !button.textContent.includes('Th√™m b·∫°n b√®')) {
            await processNextCeleb(celebIds, totalCount);
            return;
        }

        log(`${countText} ƒêang x·ª≠ l√Ω: ${celebName}`);

        showCelebPopup(celebName, countText);
        button.click(); // Click "Th√™m b·∫°n b√®"
        await sleep(1000);

        // --- M·ªöI: B·∫Øt ƒë·∫ßu theo d√µi nh·∫≠t k√Ω web (KH√îNG CH·ªú) ---
        startRealtimeLogObserver(currentId);

        const startButton = document.getElementById(currentId + '_startButton');
        if (startButton) {
            startButton.click(); // ƒê√¢y l√† l√∫c log web b·ªã reset
            await sleep(2000); // Ch·ªù 2s ƒë·ªÉ log b·∫Øt ƒë·∫ßu ch·∫°y

            if (celebIds.length === 0) {
                log(`ƒê√£ x·ª≠ l√Ω celeb cu·ªëi c√πng: ${celebName}.`, 'success');
                sessionStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify({ isRunning: true, celebIds: [], totalCount: totalCount, finished: true }));
                updateControlButtonState({ isRunning: true });

                // D·ª´ng theo d√µi sau 5s (ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫≠n ƒë∆∞·ª£c log cu·ªëi)
                setTimeout(() => {
                    if (webLogObserver) clearInterval(webLogObserver);
                }, 5000);
                return;
            } else {
                const celebToolsLink = document.querySelector('a.nav-link[href="celebrity.html"]');
                if (celebToolsLink) {
                    celebToolsLink.click(); // Trang t·∫£i l·∫°i, interval t·ª± m·∫•t
                } else {
                    log('L·ªñI: Kh√¥ng t√¨m th·∫•y link "Celebrity Tools". D·ª´ng script.', 'error');
                    stopProcess(false); // D·ª´ng n·∫øu kh√¥ng th·ªÉ t·∫£i l·∫°i
                }
            }
        } else {
            log(`KH√îNG T√åM TH·∫§Y n√∫t "B·∫Øt ƒë·∫ßu" cho ${celebName}. B·ªè qua.`, 'error');
            if (webLogObserver) clearInterval(webLogObserver); // D·ª´ng theo d√µi n·∫øu l·ªói
            await processNextCeleb(celebIds, totalCount);
        }
    }

    function startProcess() {
        const profileCards = document.querySelectorAll('div.profile');
        if (profileCards.length === 0) {
             updateControlButtonState({ isRunning: false });
            return;
        }
        const celebIds = [];
        let errorCount = 0;
        profileCards.forEach(card => {
            const nameElement = card.querySelector('div.profile-name');
            const addButton = card.querySelector('button.showMoreBtn');
            const idElement = card.querySelector('[id$="_parentElement"]');
            if (nameElement && addButton && idElement) {
                const celebName = nameElement.textContent.trim();
                const buttonText = addButton.textContent.trim();
                if (buttonText.includes('Th√™m b·∫°n b√®')) {
                    const celebId = idElement.id.replace('_parentElement', '');
                    celebIds.push(celebId);
                }
            } else {
                errorCount++;
            }
        });
        if (errorCount > 0) {
             log(`ƒê√£ b·ªè qua ${errorCount} th·∫ª do l·ªói c·∫•u tr√∫c (thi·∫øu t√™n, n√∫t ho·∫∑c ID).`, 'warn');
        }
        if (celebIds.length === 0) {
            log('Kh√¥ng t√¨m th·∫•y celeb n√†o c√≥ th·ªÉ th√™m. D·ª´ng l·∫°i.', 'info');
             updateControlButtonState({ isRunning: false });
            return;
        }
        const totalCount = celebIds.length;
        sessionStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify({ isRunning: true, celebIds: [...celebIds], totalCount: totalCount }));
        updateControlButtonState({ isRunning: true });
        if (currentTimerConfig.enabled && currentTimerConfig.minutes > 0) {
            startReloadTimer(currentTimerConfig.minutes);
        }
        processNextCeleb(celebIds, totalCount);
    };

    function stopProcess(shouldReload = true) {
        if (webLogObserver) clearInterval(webLogObserver); // <-- M·ªöI: D·ª´ng theo d√µi
        cancelReloadTimer();
        localStorage.removeItem(CONFIG.TIMER_RESTART_KEY);
        sessionStorage.removeItem(CONFIG.STORAGE_KEY);
        log('ƒê√£ d·ª´ng qu√° tr√¨nh t·ª± ƒë·ªông theo y√™u c·∫ßu ng∆∞·ªùi d√πng.', 'info');
        if (shouldReload) {
            log('ƒêang t·∫£i l·∫°i trang...');
            location.reload();
        } else {
            updateControlButtonState({ isRunning: false });
        }
    }

    // --- Main Execution (ƒê√É C·∫¨P NH·∫¨T) ---
    (function main() {
        console.log('[Auto Locket Celeb] ‚û°Ô∏è Userscript ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t (v_fixed_left_imgur).');

        // M·ªöI: Lu√¥n ch·∫°y tr√¨nh ki·ªÉm tra popup (c≈© v√† m·ªõi)
        setInterval(closeNotificationPopup, 1000); // Ki·ªÉm tra m·ªói gi√¢y

        // 1. Lu√¥n t·∫°o UI (UI s·∫Ω t·ª± ƒëi·ªÅu ch·ªânh theo trang)
        try {
            injectNewStyles();
            createMainControlUI();
            loadTimerConfig();
            setupMainUIControls();
        } catch (e) {
            console.error('[Auto Locket Celeb] L·ªói khi kh·ªüi t·∫°o UI ch√≠nh: ', e);
            return;
        }

        // --- M·ªöI: Ki·ªÉm tra Key (LOGIC ƒê√É S·ª¨A) ---
        const storedKey = localStorage.getItem(CONFIG.KEY_STORAGE_KEY);
        const isKeyValidated = (storedKey === CONFIG.SECRET_KEY);

        const container = document.getElementById('auto-celeb-main-container');
        if (isKeyValidated) {
            container.classList.remove('locked');
        } else {
            container.classList.add('locked');
            // *** S·ª¨A L·ªñI (LOGIC): X√≥a key c≈© n·∫øu kh√¥ng kh·ªõp ***
            localStorage.removeItem(CONFIG.KEY_STORAGE_KEY);
        }
        // --- H·∫øt: Ki·ªÉm tra Key ---


        // 2. Ch·ªâ ch·∫°y logic ch√≠nh (b·∫Øt ƒë·∫ßu, d·ª´ng, ch·∫°y ng·∫ßm) n·∫øu ·ªü ƒë√∫ng trang
        if (window.location.href === CONFIG.TARGET_PAGE) {

            const controlButton = document.getElementById('auto-celeb-control-button');
            if (isKeyValidated && !controlButton) {
                // Ch·ªâ b√°o l·ªói n·∫øu key ƒë√£ h·ª£p l·ªá m√† kh√¥ng t√¨m th·∫•y n√∫t
                console.error('[Auto Locket Celeb] ‚û°Ô∏è ƒê√£ k√≠ch ho·∫°t nh∆∞ng kh√¥ng t√¨m th·∫•y control button tr√™n trang target.');
                return;
            }

            if(controlButton) {
                controlButton.addEventListener('click', () => {
                    if (window.location.href !== CONFIG.TARGET_PAGE) {
                        log('ƒêang ·ªü trang kh√°c. Chuy·ªÉn h∆∞·ªõng v·ªÅ celebrity.html...');
                        window.location.href = CONFIG.TARGET_PAGE;
                        return;
                    }
                    const state = JSON.parse(sessionStorage.getItem(CONFIG.STORAGE_KEY) || '{}');
                    if (state.isRunning) {
                        stopProcess();
                    } else {
                        startProcess();
                    }
                });
            }

            // Ch·ªâ ch·∫°y logic t·ª± ƒë·ªông n·∫øu key ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t
            if (isKeyValidated) {
                runCelebLogic();
            }

        } else {
            // ·ªû c√°c trang kh√°c, kh√¥ng c·∫ßn l√†m g√¨ th√™m
            console.log('[Auto Locket Celeb] ‚û°Ô∏è ƒêang ·ªü trang ph·ª•.');
        }


        // --- H√†m runCelebLogic (ch·ªâ g·ªçi ·ªü trang celebrity.html) ---
        async function runCelebLogic() {
            try {
                await waitForElementById('usernameSearch', 20000);
                scrollToCelebSection();

                const currentState = JSON.parse(sessionStorage.getItem(CONFIG.STORAGE_KEY) || '{}');
                const needsTimerRestart = localStorage.getItem(CONFIG.TIMER_RESTART_KEY) === 'true';

                updateControlButtonState(currentState);

                if (needsTimerRestart) {
                    log('PH√ÅT HI·ªÜN C·ªú RESTART. T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu sau 2 gi√¢y...', 'timer');
                    localStorage.removeItem(CONFIG.TIMER_RESTART_KEY);
                    setTimeout(startProcess, 2000);
                }
                else if (currentState.isRunning && !currentState.finished && currentState.celebIds && currentState.celebIds.length > 0) {
                    if (currentTimerConfig.enabled && currentTimerConfig.minutes > 0) {
                        startReloadTimer(currentTimerConfig.minutes);
                    }
                    processNextCeleb(currentState.celebIds, currentState.totalCount);
                }
                else if (currentState.isRunning && currentState.finished) {
                    if (currentTimerConfig.enabled && currentTimerConfig.minutes > 0) {
                        startReloadTimer(currentTimerConfig.minutes);
                    }
                }

            } catch (error) {
                log('Ki·ªÉm tra 20s: H·∫æT GI·ªú. Container (usernameSearch) kh√¥ng t·∫£i. ƒêang reload trang...', 'error');

                const celebToolsLink = document.querySelector('a.nav-link[href="celebrity.html"]');
                if (celebToolsLink) {
                    log('ƒêang click "Celebrity Tools" ƒë·ªÉ t·∫£i l·∫°i.');
                    celebToolsLink.click();
                } else {
                    log('L·ªñI: Kh√¥ng t√¨m th·∫•y "Celebrity Tools". D√πng location.reload().', 'error');
                    location.reload();
                }
            }
        }

    })();
})();

